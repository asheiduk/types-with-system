/*
 * generated by Xtext
 */
package de.mathema.typesystem.scoping

import de.mathema.typesystem.typesystem.Entity
import de.mathema.typesystem.typesystem.EntityTypeRef
import de.mathema.typesystem.typesystem.LValueRefChain
import de.mathema.typesystem.typesystem.TypeRef
import de.mathema.typesystem.typesystem.VariableDefinitionRef
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

import static de.mathema.typesystem.typesystem.TypesystemPackage.Literals.*

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class TypesystemScopeProvider extends AbstractDeclarativeScopeProvider {
	
	def scope_LValueRefChain_right(LValueRefChain it, EReference ref){
		assertFeature(LVALUE_REF_CHAIN__RIGHT)
		
		val Entity entity = left?.typeRef?.resolveToEntity
		if( entity != null ){
			return Scopes.scopeFor(entity.attributes)
		}
	}
	
	def private dispatch TypeRef getTypeRef(LValueRefChain it){
		right?.type
	}
	
	def private dispatch TypeRef getTypeRef(VariableDefinitionRef it){
		ref?.type
	}
	
	/** Resolve a TypeRef to an Entity or null. */
	def private Entity resolveToEntity(TypeRef it){
		if( it instanceof EntityTypeRef )
			return entityType
		else 
			return null
	}
	
	def private void assertFeature(EStructuralFeature feature){
	}
}
